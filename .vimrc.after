"           ██
"          ░░
"  ██    ██ ██ ██████████  ██████  █████
" ░██   ░██░██░░██░░██░░██░░██░░█ ██░░░██
" ░░██ ░██ ░██ ░██ ░██ ░██ ░██ ░ ░██  ░░
"  ░░████  ░██ ░██ ░██ ░██ ░██   ░██   ██
"   ░░██   ░██ ███ ░██ ░██░███   ░░█████
"    ░░    ░░ ░░░  ░░  ░░ ░░░     ░░░░░
"
"  ▓▓▓▓▓▓▓▓▓▓
" ░▓ author ▓ Will Wright <will@wright.is>
" ░▓ tweet  ▓ @WilliamWright
" ░▓ code   ▓ https://github.com/willwright82/dotfiles
" ░▓▓▓▓▓▓▓▓▓▓
" ░░░░░░░░░░


" ╻┏┓╻╺┳╸┏━╸┏━┓┏━╸┏━┓┏━╸┏━╸
" ┃┃┗┫ ┃ ┣╸ ┣┳┛┣╸ ┣━┫┃  ┣╸
" ╹╹ ╹ ╹ ┗━╸╹┗╸╹  ╹ ╹┗━╸┗━╸

" security
"set modelines=0

set t_Co=256   " This is may or may not needed.
set wrap linebreak nolist
set splitright
set updatetime=250

" Fast Scrolling
set ttyfast

" stop unnecessary rendering
set lazyredraw

" show command in bottom bar
set showcmd

" Highlight current line
set cursorline

" load filetype-specific indent files
filetype plugin indent on

" enable syntax processing
syntax enable

set autoindent

" screw those standards, i like my tabs being just that. tabs.
set tabstop=2 " number of visual spaces per TAB
set shiftwidth=2
set softtabstop=2 " number of spaces in tab when editing
set expandtab " tabs are spaces

" Relative Line Numbers
set relativenumber

" list and invisible characters
" set list
" set listchars=tab:▸\ ,eol:¬

" setup the leader key
let mapleader = ","

" Keep Undo history
set hidden

" maintain undo history between sessions
set undofile
set undodir=~/.vim/undo
set noswapfile

"Dark Theme
set background=dark
"let g:airline_theme='hybridline'
"autocmd VimEnter * AirlineTheme hybridline
let g:airline_theme='PaperColor'
autocmd VimEnter * AirlineTheme PaperColor
colorscheme PaperColor
" No Background
hi Normal ctermbg=NONE
"let g:PaperColor_Dark_Override = { 'background' : '#303030', 'vertspilt' : '#303030' }
hi CursorLine cterm=NONE ctermbg=235
" Hide Non text Characters
"hi NonText guifg=bg
hi NonText ctermfg=236 guifg=NONE cterm=NONE gui=NONE
" Change Vertical Split Bar colour
highlight VertSplit ctermfg=235 ctermbg=NONE
"highlight StatusLineNC ctermfg=236 ctermbg=245
" Change Line Number Colour
"highlight LineNr ctermfg=237 ctermbg=NONE
" Change Gutter Colour
"highlight SignColumn ctermfg=238 ctermbg=NONE
let g:indentLine_color_term = 238

""Light Theme
"set background=light
"colorscheme PaperColor
"let g:airline_theme='PaperColor'
"autocmd VimEnter * AirlineTheme PaperColor
"" Hide Non text Characters
""hi NonText guifg=bg
"hi NonText ctermfg=254 guifg=254 cterm=NONE gui=NONE
"" Change Line Number Colour
"highlight LineNr ctermfg=251 ctermbg=NONE
"let g:indentLine_color_term = 251

" load Airline on Startup
"set laststatus=2
let g:airline_powerline_fonts = 1
autocmd VimEnter * AirlineToggleWhitespace

" makes ,w split windows vertically
nnoremap <leader>w <C-w>v<C-w>l

" split window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Tweaks for Netrw file explorer
let g:netrw_banner=0 " disable annoying banner
let g:netrw_browse_split=4 " open in prior window
let g:netrw_altv=1 " open splits to the right
let g:netrw_liststyle=3 " tree view
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'
" Now we can:
" - :edit a folder to open file browser
" - <CR>/v/t to open in h-split/v-split/tab

" mouse settings
:set mouse=a
":map <xCSI>[62~ <MouseDown>

" https://alexpearce.me/2014/05/italics-in-iterm2-vim-tmux/
" has to go after all theme declarations
highlight Comment cterm=italic
autocmd FileType javascript.jsx highlight xmlAttrib cterm=italic

" Enclose in Brackets
" vnoremap _( <Esc>`>a)<Esc>`<i(<Esc>
" vnoremap _[ <Esc>`>a]<Esc>`<i[<Esc>
" vnoremap _{ <Esc>`>a}<Esc>`<i{<Esc>

" Fix to NerdTree width for VIM 8 + Janus
autocmd! AuNERDTreeCmd Vimenter *

" Disable EXEC file highlight in NERDtree
highlight link NERDTreeExecFile ModeMsg

" Show hidden files
let g:NERDTreeShowHidden = 1
let g:NERDTreeQuitOnOpen = 1
let g:NERDTreeWinSize = 31
let g:nerdtree_tabs_open_on_console_startup = 2
let g:nerdtree_tabs_open_on_gui_startup = 2
let g:nerdtree_tabs_autofind = 1
map <Leader>n <plug>NERDTreeTabsToggle<CR>

" Don't add the comment prefix when I hit enter or o/O on a comment line.
autocmd FileType * setlocal formatoptions-=r formatoptions-=o

" Remove pipes in window split bar
set fillchars+=vert:\ 

" IndentLine plugin Character
"let g:indentLine_char = '⦙'
let g:indentLine_char = '·'
let g:indentLine_concealcursor=0

" Set path to recursive Subdirectories
set path+=**

" visual autocomplete for command menu
set wildmenu
"set wildmode=longest,list:longest
set completeopt+=longest

set showmode

" Tame searching
nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set infercase
" the /g flag on :s substitutions by default
set gdefault
" search as characters are entered
set incsearch
" highlight matching [{()}]
set showmatch
" highlight matches
set hlsearch
" get the word under the cursor, and searches for it in the current directory and all subdirectories, opening the quickfix window when done
"map <F3> :execute 'vimgrep /' . expand('<cword>') . '/j **' <Bar> cw<CR>

" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

" Use shell to run command on current line
noremap Q !!$SHELL<CR>

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

"nnoremap <F12> :grep! -G /FIXME|TODO/g<CR>:cw<CR>

" bind \ (backward slash) to grep shortcut
command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap \ :Ag<SPACE>

"" fold based on indent level
set foldmethod=indent
"set foldlevelstart=20
"" disable folding
"set nofoldenable
"" space open/closes folds
"nnoremap <space> za
""au FileType html,htmldjango,css,sass,javascript,coffee,python,ruby,eruby setl foldmethod=indent foldenable

" space open/closes folds
"set foldmethod=syntax
set foldlevel=99999
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf

" Remove Concealing
set conceallevel=0

" Watch for changes in .vimrc and automatically reload the config
"augroup reload_vimrc " {
  "autocmd!
  "autocmd BufWritePost $MYVIMRC source $MYVIMRC
"augroup END " }

"python with virtualenv support
"py << EOF
"import os
"import sys
"if 'VIRTUAL_ENV' in os.environ:
"project_base_dir = os.environ['VIRTUAL_ENV']
"activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
"execfile(activate_this, dict(__file__=activate_this))
"EOF

" Enable all Python syntax highlighting features
let python_highlight_all = 1

" Disable EX Mode for good
"nnoremap Q <nop>

" ┏━╸┏━┓┏┳┓┏┳┓┏━┓┏┓╻╺┳┓┏━┓
" ┃  ┃ ┃┃┃┃┃┃┃┣━┫┃┗┫ ┃┃┗━┓
" ┗━╸┗━┛╹ ╹╹ ╹╹ ╹╹ ╹╺┻┛┗━┛

" clear search
nnoremap <leader><space> :noh<cr>

" Match bracket pairs with TAB
nnoremap <tab> %
vnoremap <tab> %

" Easier to save files
nnoremap ; :
inoremap ;w <ESC>:w

inoremap <M-3> #

" move lines up and down with ALT+J/K
"let g:move_key_modifier = 'M'
execute "set <M-j>=\ej"
execute "set <M-k>=\ek"
nnoremap <M-j> :m .+1<CR>==
nnoremap <M-k> :m .-2<CR>==
inoremap <M-j> <Esc>:m .+1<CR>==gi
inoremap <M-k> <Esc>:m .-2<CR>==gi
vnoremap <M-j> :m '>+1<CR>gv=gv
vnoremap <M-k> :m '<-2<CR>gv=gv

" Smooth Scrolling
noremap <silent> <C-u> :call smooth_scroll#up(&scroll, 30, 2)<CR>
noremap <silent> <C-d> :call smooth_scroll#down(&scroll, 30, 2)<CR>
noremap <silent> <C-b> :call smooth_scroll#up(&scroll*2, 30, 4)<CR>
noremap <silent> <C-f> :call smooth_scroll#down(&scroll*2, 30, 4)<CR>

" Insert new line in insert mode
imap <M-o> <Esc>o

" Insert one character in normal mode
nnoremap <leader>i i_<Esc>r

" Pressing ,sc will toggle and untoggle spell checking
map <leader>sc :setlocal spell!<cr>

" Learning Mode
"nnoremap <Left> :echoe 'Use h'<CR>
"nnoremap <Right> :echoe 'Use l'<CR>
"nnoremap <Up> :echoe 'Use k'<CR>
"nnoremap <Down> :echoe 'Use j'<CR>

" Proper J & K
"nnoremap k gk
"nnoremap j gj
"nnoremap gk k
"nnoremap gj j

" Line number then ENTER goto line
"nnoremap <CR> G

" OSX Clipboard
"set clipboard=unnamedplus
vmap <C-c> y:call system("pbcopy", getreg("\""))<CR>
"nmap <C-v> :call setreg("\"",system("pbpaste"))<CR>p
" groovyness in Insert mode (lets you paste and keep on typing)
"imap <C-v> <Esc><C-v>a
" Better pasting from clipboard
map <Leader>v :set paste<CR>"*]p:set nopaste<cr>==

" Remove all trailing whitespace by pressing F5
nnoremap <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>

" Switch buffers by number
nnoremap <F6> :buffers<CR>:b<Space>

" toggle gundo
nnoremap <leader>gu :GundoToggle<CR>

" delete deletes in Normal mode
nnoremap <backspace> dhi

" Fold Tag
nnoremap <leader>ft Vatzf

" Quick vimrc edit in vertical split
nnoremap <leader>ev <C-w><C-v><C-l>:e ~/.files/.vimrc.after<cr>

" Open and close Quickfix
map <Leader>co :copen<CR>
map <Leader>cc :cclose<CR>

" Run Code
autocmd FileType ruby,eruby nmap <leader>e :w<CR>:!ruby %<cr>
autocmd FileType ruby,eruby nmap <leader>eb :w<CR>:call VimuxRunCommandInDir("clear; ruby " . bufname("%"),0)<CR>
autocmd FileType javascript nmap <leader>e :w<CR>:!node %<CR>
autocmd FileType javascript nmap <leader>eb :w<CR>:call VimuxRunCommandInDir("clear; node " . bufname("%"),0)<CR>

autocmd FileType ruby,eruby,javascript nmap <leader>rt :w<CR>:TestFile<CR>
autocmd FileType ruby,eruby,javascript nmap <leader>rn :w<CR>:TestNearest<CR>
autocmd FileType ruby,eruby,javascript nmap <leader>rs :w<CR>:TestSuite<CR>

autocmd FileType ruby,eruby imap <leader>e <ESC>:w<CR>:!ruby %<CR>
autocmd FileType ruby,eruby imap <leader>eb <ESC>:w<CR>:call VimuxRunCommandInDir("clear; ruby " . bufname("%"),0)<CR>

autocmd FileType javascript imap <leader>e <ESC>:w<CR>:!node %<CR>
autocmd FileType javascript imap <leader>eb <ESC>:w<CR>:call VimuxRunCommandInDir("clear; node " . bufname("%"),0)<CR>

autocmd FileType ruby,eruby,javascript imap <leader>rt <ESC>:w<CR>:TestFile<CR>
autocmd FileType ruby,eruby,javascript imap <leader>rn <ESC>:w<CR>:TestNearest<CR>
autocmd FileType ruby,eruby,javascript imap <leader>rs <ESC>:w<CR>:TestSuite<CR>

autocmd FileType python nmap <leader>e :w<CR>:!python %<CR>
autocmd FileType python nmap <leader>eb :w<CR>:call VimuxRunCommandInDir("clear; python " . bufname("%"),0)<CR>
autocmd FileType python imap <leader>eb <ESC>:w<CR>:call VimuxRunCommandInDir("clear; python " . bufname("%"),0)<CR>
autocmd FileType python imap <leader>e <ESC>:w<CR>:!python %<CR>
autocmd FileType python map <Leader>n <plug>NERDTreeTabsToggle<CR>

" Save on losing focus
"au FocusLost * :wa
"au FocusLost * silent! wa
autocmd BufLeave,FocusLost * stopinsert | silent! wall

" Save fold and load information
autocmd BufWrite * mkview
autocmd BufRead * silent loadview

" Create the Ctags tags file
command! MakeTags !ctags -R .
" Now we can:
" - Use <CTRL>+] to jump to tag under cursor
" - Use g+<CTRL>+] for ambiguous tags
" - Use <CTRL>+t to jump back up the tag stack

" save session and reload
"nnoremap <leader>s :mksession<CR>
let g:returnAppFlag = 0
let g:returnApp = 'iTerm'
nnoremap <leader>s :w<CR>:ChromeReload<CR>
inoremap <leader>s <ESC>:w<CR>:ChromeReload<CR>

" save session and preview
nnoremap <leader>p :w<CR>:exe '!open -a "Google Chrome" %'<CR><CR>
inoremap <leader>p <ESC>:w<CR>:exe '!open -a "Google Chrome" %'<CR><CR>

" Autoformat code
noremap <F2> :Autoformat<CR>

" Autoformat Javascript and JSX using prettier
autocmd FileType javascript.jsx,javascript setlocal formatprg=prettier\ --single-quote\ --trailing-comma\ es5\ --stdin
" Run prettier on file save
"autocmd BufWritePre *.js :normal gggqG
"autocmd BufWritePre *.js exe 'normal! gggqG\<C-o>\<C-o>'

" Make CTRL-K list diagraphs before each digraph entry
inoremap <expr> <C-K> ShowDigraphs()

function! ShowDigraphs ()
  digraphs
  call getchar()
  return "\<C-K>"
endfunction

" Markdown

" For en/em dashes, respectively:
" inoremap <buffer> --<space> –<space>
" inoremap <buffer> -- —
autocmd FileType markdown imap -- –
autocmd FileType markdown imap --- —

" No auto-wrap
autocmd FileType markdown set textwidth=0

" Convert to Docx using pandoc
autocmd FileType markdown map <silent> <leader>c :silent w<CR> :!pandoc '%' -o '%:r.docx'<CR><CR>

" Open and save doc & docx files as markdown
autocmd BufReadPre *.docx silent set ro
autocmd BufEnter *.docx silent set modifiable
autocmd BufEnter *.docx silent %!pandoc --wrap=none -f docx -t markdown '%'
autocmd BufEnter *.docx silent set filetype=markdown
autocmd BufEnter *.docx silent set noreadonly
"autocmd BufEnter *.docx silent set buftype: ''
"autocmd BufWritePost *.docx %!pandoc -f markdown -t docx % > '%'

autocmd FileType markdown silent! TableModeEnable

autocmd FileType markdown
    \ set formatoptions-=q |
    \ set formatlistpat=^\\s*\\d\\+\\.\\s\\+\\\|^\\s*\[-*+]\\s\\+

" Convert CSV table to Markdown table
function! CsvToMd ()
  set filetype=markdown
  silent! %s/\,/\|/e
  silent! %s/^/\|/e
  silent! %s/$/\|/e
  normal gg o |-+-|
  "set filetype=csv
endfunction

" Watch for changes in .vimrc and automatically reload the config
"augroup myvimrc
  "au!
  "au BufWritePost .vimrc,.vimrc.after,.vimrc.before,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
"augroup END

" Open any file with a pre-existing swapfile in readonly mode
augroup NoSimultaneousEdits
  autocmd!
  autocmd SwapExists * let v:swapchoice = 'o'
  autocmd SwapExists * echomsg ErrorMsg
  autocmd SwapExists * echo 'Duplicate edit session (readonly)'
  autocmd SwapExists * echohl None
  autocmd SwapExists * sleep 2
augroup END

" Rpdf converts PDF to text without line breaks
:command! -complete=file -nargs=1 Rpdf :r !pdftotext -nopgbrk <q-args> -

" Add numbers to a list
:command! -nargs=0 -range=% Number <line1>,<line2>s/^\s*\zs/\=(line('.') - <line1>+1).'. '

" Rpdf converts PDF to text with line breaks
":command! -complete=file -nargs=1 Rpdf :r !pdftotext -nopgbrk <q-args> - |fmt -csw78

" ┏━┓╻  ╻ ╻┏━╸╻┏┓╻   ┏━┓╺┳╸╻ ╻┏━╸┏━╸
" ┣━┛┃  ┃ ┃┃╺┓┃┃┗┫   ┗━┓ ┃ ┃ ┃┣╸ ┣╸
" ╹  ┗━╸┗━┛┗━┛╹╹ ╹   ┗━┛ ╹ ┗━┛╹  ╹

" git-gutter http://git.io/vimgitgutter
let g:gitgutter_realtime = 1
let g:gitgutter_eager = 1
"If you experience a lag, you can trade speed for accuracy:
"let g:gitgutter_realtime = 0
"let g:gitgutter_eager = 0

"let g:gitgutter_diff_args = '-w'
"let g:gitgutter_sign_added = '+'
"let g:gitgutter_sign_modified = '~'
"let g:gitgutter_sign_removed = '-'
"let g:gitgutter_sign_removed_first_line = '^'
"let g:gitgutter_sign_modified_removed = ':'
let g:gitgutter_max_signs = 1500
"highlight clear SignColumn
"highlight GitGutterAdd ctermfg=green ctermbg=237
"highlight GitGutterChange ctermfg=yellow ctermbg=237
"highlight GitGutterDelete ctermfg=red ctermbg=237
"highlight GitGutterChangeDelete ctermfg=red ctermbg=237

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_aggregate_errors = 1
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
"let g:syntastic_quiet_messages = { '!level': 'errors' }
"let g:syntastic_quiet_messages = { 'type': 'style' }
let g:syntastic_quiet_messages = { 'regex': 'Line is too long' }
"let g:syntastic_quiet_messages = { 'file:p':  ['\m^/usr/include/', '\m\c\.h$'] }

" Use Eslint for React
let g:syntastic_javascript_checkers = ['eslint']

" Use Rubocop for Ruby
"let g:syntastic_ruby_checkers = ['rubocop', 'rubylint']
let g:syntastic_ruby_checkers = ['rubocop', 'mri']

let g:syntastic_mode_map = {
      \ "mode": "active",
      \ "active_filetypes": ["ruby", "eruby", "javascript", "javascript.jsx", "css", "scss", "sass"],
      \ "passive_filetypes": ["markdown"] }

let g:jsx_ext_required = 0 " Allow JSX in normal JS files

" buffergator tweaks
" split below VIM window
let g:buffergator_viewport_split_policy = "b"
" 15 lines height for window
let g:buffergator_split_size = 15
let g:buffergator_sort_regime = "mru"

" Exit mode in Multiple-cursors
let g:multi_cursor_exit_from_visual_mode = 0
let g:multi_cursor_exit_from_insert_mode = 0

" Snipmate
" Use CTRL+J for snippet completion
imap <C-J> <Plug>snipMateNextOrTrigger
smap <C-J> <Plug>snipMateNextOrTrigger
let g:snipMate.scope_aliases['ruby'] = 'ruby,ruby-rails'
let g:snipMate.scope_aliases['javascript'] = 'javascript,javascript.es6.react,javascript.meteor'
let g:snipMate.scope_aliases['html'] = 'html,html.meteor'
"autocmd FileType js UltiSnipsAddFiletypes javascript.es6.react
"autocmd FileType 'javascript.jsx' UltiSnipsAddFiletypes javascript-react

" Vim-test -- make test commands execute using vim
let test#strategy = "dispatch"

" groenewege/vim-less
autocmd BufNewFile,BufRead *.less set filetype=less
autocmd FileType css,sass,scss,less set omnifunc=csscomplete#CompleteCSS

" mtth/scratch.vim
let g:scratch_autohide = &hidden
let g:scratch_top = 0
let g:scratch_no_mappings = 1
nmap <leader>ss <plug>(scratch-insert-reuse)
nmap <leader>sS <plug>(scratch-insert-clear)
xmap <leader>ss <plug>(scratch-selection-reuse)
xmap <leader>sS <plug>(scratch-selection-clear)

" kien/ctrlp.vim
" Close NERDTree before opening CtrlP
map <c-p> :NERDTreeTabsClose<CR>:CtrlP<CR>
" Use The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" EasyAlign
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" FZF.vim
"nnoremap <leader>t :Files<cr>
"nnoremap <leader>b :Buffers<cr>
"nmap <leader><tab> <plug>(fzf-maps-n)
"xmap <leader><tab> <plug>(fzf-maps-x)
"omap <leader><tab> <plug>(fzf-maps-o)
"" Insert mode completion
"imap <c-x><c-f> <plug>(fzf-complete-path)
"imap <c-x><c-j> <plug>(fzf-complete-file-ag)
"let g:fzf_prefer_tmux = 1

" Python-mode
" Activate rope
" Keys:
" K             Show python docs
" <Ctrl-Space>  Rope autocomplete
" <Ctrl-c>g     Rope goto definition
" <Ctrl-c>d     Rope show documentation
" <Ctrl-c>f     Rope find occurrences
" <Leader>b     Set, unset breakpoint (g:pymode_breakpoint enabled)
" [[            Jump on previous class or function (normal, visual, operator modes)
" ]]            Jump on next class or function (normal, visual, operator modes)
" [M            Jump on previous class or method (normal, visual, operator modes)
" ]M            Jump on next class or method (normal, visual, operator modes)
let g:pymode_python = 'python3'
let g:pymode_rope = 1

" Documentation
let g:pymode_doc = 1
let g:pymode_doc_key = 'K'

"Linting
let g:pymode_lint = 1
let g:pymode_lint_checker = "pyflakes,pep8"
" Auto check on save
let g:pymode_lint_write = 1

" Support virtualenv
let g:pymode_virtualenv = 1

" Enable breakpoints plugin
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_bind = '<leader>pb'

" syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all
let g:pymode_options_max_line_length = 80
let g:pymode_options_colorcolumn = 0

" Don't autofold code
let g:pymode_folding = 0

let g:jedi#auto_initialization = 0
let g:jedi#auto_vim_configuration = 0
let g:jedi#rename_command = '<Leader>jr'
let g:jedi#usages_command = '<Leader>jn'

" Vim-markdown
let g:vim_markdown_toc_autofit = 1
let g:vim_markdown_new_list_item_indent = 2

" allows cursor change in tmux mode
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" don't blink the cursor
"set guicursor+=i:blinkwait0

" ┏━┓╺┳╸┏━┓╺┳╸╻ ╻┏━┓╻  ╻┏┓╻┏━╸
" ┗━┓ ┃ ┣━┫ ┃ ┃ ┃┗━┓┃  ┃┃┗┫┣╸
" ┗━┛ ╹ ╹ ╹ ╹ ┗━┛┗━┛┗━╸╹╹ ╹┗━╸

" let g:tmuxline_preset = 'nightly_fox'
" or
" let g:tmuxline_preset = 'full'
" or
"let g:tmuxline_preset = 'tmux'
" other presets available in autoload/tmuxline/presets/*
"
" #H    Hostname of local host
" #h    Hostname of local host without the domain name
" #F    Current window flag
" #I    Current window index
" #S    Session name
" #W    Current window name
" #(shell-command)  First line of the command's output)
" \'x'    : '#(~/bin/tmux-charge) [✉ #(~/bin/imap_check.py)]',
" \'x'    : '#(/usr/bin/battery -t)',
" \'c'    : ' #(~/bin/branch.sh)',

let g:tmuxline_preset = {
      \'a'    : '#h',
      \'b'    : '#S',
      \'c'    : '#W',
      \'win'  : '#I #W',
      \'cwin' : '#I #W',
      \'x'    : '#(~/bin/tmux-charge)',
      \'y'    : '%a %d/%h %H:%M #(~/bin/temperature)',
      \'z'    : '#(dig +short myip.opendns.com @resolver1.opendns.com)'}
